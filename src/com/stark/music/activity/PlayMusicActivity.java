package com.stark.music.activity;import android.app.Activity;import android.app.AlertDialog;import android.content.BroadcastReceiver;import android.content.Context;import android.content.Intent;import android.content.IntentFilter;import android.content.pm.ActivityInfo;import android.database.sqlite.SQLiteDatabase;import android.graphics.Bitmap;import android.graphics.Canvas;import android.hardware.Sensor;import android.hardware.SensorEvent;import android.hardware.SensorEventListener;import android.hardware.SensorManager;import android.media.AudioManager;import android.os.Bundle;import android.provider.Settings;import android.telephony.PhoneStateListener;import android.telephony.TelephonyManager;import android.util.Log;import android.view.Gravity;import android.view.KeyEvent;import android.view.View;import android.view.View.OnClickListener;import android.view.Window;import android.view.WindowManager;import android.view.animation.Animation;import android.view.animation.Animation.AnimationListener;import android.view.animation.AnimationUtils;import android.widget.ImageView;import android.widget.RelativeLayout;import android.widget.SeekBar;import android.widget.SeekBar.OnSeekBarChangeListener;import android.widget.TextView;import com.stark.database.DBHelperofPlayState;import com.stark.domain.AppConstant;import com.stark.domain.Mp3Info;import com.stark.music.R;import com.stark.service.PlayerService;import com.stark.util.MediaUtil;import java.io.Serializable;import java.util.ArrayList;import java.util.List;public class PlayMusicActivity extends Activity implements SensorEventListener {	private TextView musicTitle = null;	private TextView musicArtist = null;	private ImageView previousBtn; // 上一首	private ImageView playBtn; // 播放（播放、暂停）	private ImageView nextBtn; // 下一首	private ImageView backArrow;// 后退	private ImageView menuIV;	private SeekBar music_progressBar; // 歌曲进度	private TextView currentProgress; // 当前进度消耗的时间	private TextView finalProgress; // 歌曲时间	private TextView titleSongNumberTV;	private TextView repeatPlayTV;	private TextView randomPlayTV;	private ImageView artwork_front;	private ImageView artwork_behind;	private AlertDialog dialog;	private RelativeLayout artworkRL;	private String title; // 歌曲标题	private String artist; // 歌曲艺术家	private String url; // 歌曲路径	private int listPosition; // 播放歌曲在mp3Infos的位置	private int currentTime; // 当前歌曲播放时间	private int duration; // 歌曲长度	private int flag; // 播放标识	private int artworklayoutHeight;	private int artworkLayoutWidth;	private int playAction = 0;	private int repeatState;	private final int isCurrentRepeat = 1; // 单曲循环	private final int isAllRepeat = 2; // 全部循环	private final int isNoneRepeat = 3; // 无重复播放	private boolean isPlaying = false; // 正在播放	private boolean isPause = false; // 暂停	private boolean isNoneShuffle; // 顺序播放	private boolean isShuffle; // 随机播放	private static List<Mp3Info> mp3Infos;	private PlayerReceiver playerReceiver;	private FinishBroadcastReceiver finishReceiver;    private ServicePlayControlReceiver servicePlayControlReceiver;	public static final String UPDATE_ACTION = "com.stark.action.UPDATE_ACTION"; // 更新动作	public static final String CTL_ACTION = "com.stark.action.CTL_ACTION"; // 控制动作	public static final String MUSIC_CURRENT = "com.stark.action.MUSIC_CURRENT"; // 音乐当前时间改变动作	public static final String MUSIC_DURATION = "com.stark.action.MUSIC_DURATION";// 音乐播放长度改变动作	public static final String MUSIC_PLAYING = "com.stark.action.MUSIC_PLAYING"; // 音乐正在播放动作	public static final String REPEAT_ACTION = "com.stark.action.REPEAT_ACTION"; // 音乐重复播放动作	public static final String SHUFFLE_ACTION = "com.stark.action.SHUFFLE_ACTION";// 音乐随机播放动作	public static final String SHOW_LRC = "com.stark.action.SHOW_LRC"; // 通知显示歌词    public static final String SERVICE_PLAY_CONTROL = "com.stark.action.SERVICE_PLAY_CONTROL";	private AudioManager am; // 音频管理引用，提供对音频的控制	private int currentVolume; // 当前音量	private int maxVolume; // 最大音量	private SeekBar sb_player_voice; // 控制音量大小	private DBHelperofPlayState dbHelperofPlayState;	private SQLiteDatabase db;	// 音量面板显示和隐藏动画	/** 暂停状态下换歌的回调类 **/	private PauseCaller pauseCaller;	/** 换歌时的Intent **/	private Intent actionIntent;	/** 进度条改变时的Intent **/	private Intent progressIntent;	/** 暂停状态下换歌后等待播放 **/	private boolean isWaitForPlay = false;	private boolean isProgressChangeByUser = false;	private SensorManager mSensorManager;	private Sensor mOrientationSensor;    private boolean hasResumed = false;    @Override	protected void onCreate(Bundle savedInstanceState) {		super.onCreate(savedInstanceState);		requestWindowFeature(Window.FEATURE_NO_TITLE);		setContentView(R.layout.play_activity_rl);		mSensorManager = (SensorManager) getSystemService(SENSOR_SERVICE);		mOrientationSensor = mSensorManager				.getDefaultSensor(Sensor.TYPE_ORIENTATION);		registerReceiver();		findViewById();		getDataFromBundle();		setPhoneListener();		setSystemAudioMgr();		initView(); // 初始化视图		setViewOnclickListener();	}	/**	 * 添加来电监听事件	 */	public void setPhoneListener() {		TelephonyManager telManager = (TelephonyManager) getSystemService(Context.TELEPHONY_SERVICE); // 获取系统服务		telManager.listen(new MobliePhoneStateListener(),				PhoneStateListener.LISTEN_CALL_STATE);	}	/**	 * 获得系统音频管理服务对象	 */	public void setSystemAudioMgr() {		am = (AudioManager) getSystemService(Context.AUDIO_SERVICE);		currentVolume = am.getStreamVolume(AudioManager.STREAM_MUSIC);		maxVolume = am.getStreamMaxVolume(AudioManager.STREAM_MUSIC);		am.setStreamVolume(AudioManager.STREAM_MUSIC, currentVolume, 0);	}	/**	 * 定义和注册广播接收器	 */	private void registerReceiver() {		playerReceiver = new PlayerReceiver();		IntentFilter filter = new IntentFilter();		filter.addAction(UPDATE_ACTION);		filter.addAction(MUSIC_CURRENT);		filter.addAction(MUSIC_DURATION);		getApplicationContext().registerReceiver(playerReceiver, filter);		finishReceiver = new FinishBroadcastReceiver();		IntentFilter filter2 = new IntentFilter();		filter2.addAction("FINISH");		getApplicationContext().registerReceiver(finishReceiver, filter2);        servicePlayControlReceiver = new ServicePlayControlReceiver();        IntentFilter filter3 = new IntentFilter();        filter3.addAction(SERVICE_PLAY_CONTROL);        getApplicationContext().registerReceiver(servicePlayControlReceiver,filter3);	}	private void findViewById() {		musicTitle = (TextView) findViewById(R.id.textView_play_songName);		musicArtist = (TextView) findViewById(R.id.textView_artist);		previousBtn = (ImageView) findViewById(R.id.imageView_playbtn_previous);		playBtn = (ImageView) findViewById(R.id.imageView_playbtn_pause);		nextBtn = (ImageView) findViewById(R.id.imageView_playbtn_next);		artwork_front = (ImageView) findViewById(R.id.imageView_artwork_front);		artwork_behind = (ImageView) findViewById(R.id.imageView_artwork_behind);		music_progressBar = (SeekBar) findViewById(R.id.seekBar_playProgress);		currentProgress = (TextView) findViewById(R.id.textView_currentTime);		finalProgress = (TextView) findViewById(R.id.textView_remaining_time);		sb_player_voice = (SeekBar) findViewById(R.id.seekBar_volume);		titleSongNumberTV = (TextView) findViewById(R.id.textView_isPlaying_music_number);		repeatPlayTV = (TextView) findViewById(R.id.textView_repeatPlay);		randomPlayTV = (TextView) findViewById(R.id.textView_random_play);		backArrow = (ImageView) findViewById(R.id.imageView_arrow_left);		menuIV = (ImageView) findViewById(R.id.imageView_menu);	}	/**	 * 初始化界面	 */	public void initView() {		isPlaying = true;		isPause = false;		musicTitle.setText(title);		musicArtist.setText(artist);		music_progressBar.setProgress(currentTime);		music_progressBar.setMax(duration);		sb_player_voice.setMax(maxVolume);		sb_player_voice.setProgress(currentVolume);		titleSongNumberTV.setText((listPosition + 1) + "/" + mp3Infos.size());		Mp3Info mp3Info = mp3Infos.get(listPosition);		finalProgress.setText(MediaUtil.formatTime(mp3Infos.get(listPosition)				.getDuration()));		switch (repeatState) {		case isCurrentRepeat: // 单曲循环			repeatPlayTV.setText(R.string.repeat_play_song);			repeatPlayTV.setBackgroundResource(R.drawable.textview_touch_bg);			break;		case isAllRepeat: // 全部循环			repeatPlayTV.setText(R.string.repeat_play_all_songs);			repeatPlayTV.setBackgroundResource(R.drawable.textview_touch_bg);			break;		case isNoneRepeat: // 无重复			repeatPlayTV.setBackgroundDrawable(null);			break;		}		if (isShuffle) {// 随机播放状态			isNoneShuffle = false;// 顺序播放为false			randomPlayTV.setText(R.string.random_play_all);			randomPlayTV.setBackgroundResource(R.drawable.textview_touch_bg);		} else {			isNoneShuffle = true;		}		if (flag == AppConstant.PlayerMsg.PLAYING_MSG) { // 如果播放信息是正在播放			Intent intent = new Intent();			intent.setAction(SHOW_LRC);			intent.putExtra("listPosition", listPosition);			sendBroadcast(intent);		} else if (flag == AppConstant.PlayerMsg.PLAY_MSG) { // 如果是点击列表播放歌曲的话			play();		} else if (flag == AppConstant.PlayerMsg.CONTINUE_MSG) {			Intent intent = new Intent(PlayMusicActivity.this,					PlayerService.class);			intent.setAction("com.stark.media.MUSIC_SERVICE");			intent.putExtra("MSG", AppConstant.PlayerMsg.CONTINUE_MSG); // 继续播放音乐			intent.putExtra("mp3Infos", (Serializable) mp3Infos);			startService(intent);		}else if(flag == AppConstant.PlayerMsg.PAUSE_MSG){			Intent intent = new Intent(PlayMusicActivity.this,					PlayerService.class);			intent.setAction("com.stark.media.MUSIC_SERVICE");			intent.putExtra("MSG", AppConstant.PlayerMsg.PAUSE_MSG); // 暂停播放音乐			intent.putExtra("mp3Infos", (Serializable) mp3Infos);			startService(intent);		}	}	/**	 * 给每一个按钮设置监听器	 */	private void setViewOnclickListener() {		ViewOnclickListener viewOnClickListener = new ViewOnclickListener();		previousBtn.setOnClickListener(viewOnClickListener);		playBtn.setOnClickListener(viewOnClickListener);		nextBtn.setOnClickListener(viewOnClickListener);		music_progressBar				.setOnSeekBarChangeListener(new SeekBarChangeListener());		sb_player_voice.setOnSeekBarChangeListener(new SeekBarChangeListener());		repeatPlayTV.setOnClickListener(viewOnClickListener);		randomPlayTV.setOnClickListener(viewOnClickListener);		backArrow.setOnClickListener(viewOnClickListener);		menuIV.setOnClickListener(viewOnClickListener);	}	/**	 * 控件点击事件	 */	private class ViewOnclickListener implements OnClickListener {		Intent intent = new Intent();		@Override		public void onClick(View v) {			switch (v.getId()) {			case R.id.imageView_playbtn_pause:				if (isPlaying) {					playBtn.setImageResource(R.drawable.play_play);					intent.setAction("com.stark.media.MUSIC_SERVICE");					intent.putExtra("MSG", AppConstant.PlayerMsg.PAUSE_MSG);					intent.putExtra("mp3Infos", (Serializable) mp3Infos);					intent.putExtra("listPosition", listPosition);					startService(intent);					isPlaying = false;					isPause = true;					isWaitForPlay = true;				} else if (isPause) {					playBtn.setImageResource(R.drawable.play_pause_selector);					if (isWaitForPlay) {						if (pauseCaller != null) {							pauseCaller.pauseCall();						}						isWaitForPlay = false;						isPause = false;						isPlaying = true;						intent.setAction("com.stark.media.MUSIC_SERVICE");						intent.putExtra("MSG",								AppConstant.PlayerMsg.CONTINUE_MSG);						intent.putExtra("mp3Infos", (Serializable) mp3Infos);						startService(intent);						return;					}					if (isProgressChangeByUser) {						stopService(progressIntent);						startService(progressIntent);						isProgressChangeByUser = false;						isPause = false;						isPlaying = true;						return;					}					intent.setAction("com.stark.media.MUSIC_SERVICE");					intent.putExtra("MSG", AppConstant.PlayerMsg.CONTINUE_MSG);					intent.putExtra("mp3Infos", (Serializable) mp3Infos);					startService(intent);				}				break;			case R.id.imageView_playbtn_previous: // 上一首歌曲				previous_music();				break;			case R.id.imageView_playbtn_next: // 下一首歌曲				next_music();				break;			case R.id.textView_repeatPlay:				showRepeatPlayDialog();				break;			case R.id.textView_random_play:				Intent shuffleIntent = new Intent(SHUFFLE_ACTION);				dbHelperofPlayState = new DBHelperofPlayState(						PlayMusicActivity.this);				if (isNoneShuffle) {					randomPlayTV							.setBackgroundResource(R.drawable.textview_touch_bg);					randomPlayTV.setText(R.string.random_play_all);					isShuffle = true;					isNoneShuffle = false;					shuffleMusic();					shuffleIntent.putExtra("shuffleState", true);					sendBroadcast(shuffleIntent);					dbHelperofPlayState.changeData("repeat_state", "" + 4);					dbHelperofPlayState.changeData("is_shuffle", "" + 1);					dbHelperofPlayState.changeData("is_none_shuffle", "" + 0);					/** 重置重复播放 */					if (repeatState != isNoneRepeat) {						repeatPlayTV.setText(R.string.repeat_play);						repeatPlayTV.setBackgroundDrawable(null);					}				} else {					randomPlayTV.setBackgroundDrawable(null);					randomPlayTV.setText(R.string.random_play);					isShuffle = false;					isNoneShuffle = true;					repeat_all();					dbHelperofPlayState.changeData("repeat_state", "" + 2);					dbHelperofPlayState.changeData("is_shuffle", "" + 0);					dbHelperofPlayState.changeData("is_none_shuffle", "" + 1);					repeatState = isAllRepeat;				}				break;			case R.id.imageView_arrow_left:				PlayMusicActivity.this.finish();				break;			case R.id.imageView_menu:				Intent intent = new Intent(PlayMusicActivity.this,						MenuActivity.class);				intent.putExtra("song_name", title);				intent.putExtra("album", mp3Infos.get(listPosition).getAlbum());				intent.putExtra("artist", artist);				startActivity(intent);				break;			}		}	}	private void showRepeatPlayDialog() {		dialog = new AlertDialog.Builder(this).create();		Window window = dialog.getWindow();		WindowManager.LayoutParams lp = window.getAttributes();		WindowManager wm = (WindowManager) this				.getSystemService(Context.WINDOW_SERVICE);		window.setGravity(Gravity.BOTTOM);		window.setAttributes(lp);		window.setWindowAnimations(R.style.PopupAnimation);		dialog.show();		dialog.setContentView(R.layout.alertdialog_repeatplay_ll);		RepeatDialogListener repeatDialogListener = new RepeatDialogListener();		dialog.findViewById(R.id.tableRow1).setOnClickListener(				repeatDialogListener);		dialog.findViewById(R.id.tableRow2).setOnClickListener(				repeatDialogListener);		dialog.findViewById(R.id.tableRow3).setOnClickListener(				repeatDialogListener);		dialog.findViewById(R.id.tableRow4).setOnClickListener(				repeatDialogListener);	}	private class RepeatDialogListener implements OnClickListener {		Intent intent = new Intent(REPEAT_ACTION);		@Override		public void onClick(View v) {			dbHelperofPlayState = new DBHelperofPlayState(					PlayMusicActivity.this);			switch (v.getId()) {			case R.id.tableRow1:				if (repeatState == isCurrentRepeat						|| repeatState == isAllRepeat) {					repeatPlayTV.setText(R.string.repeat_play);					repeatPlayTV.setBackgroundDrawable(null);					repeat_none();					repeatState = isAllRepeat;					intent.putExtra("repeatState", isAllRepeat);					sendBroadcast(intent);				}				dialog.dismiss();				dbHelperofPlayState.changeData("repeat_state", "" + 3);				dbHelperofPlayState.changeData("is_shuffle", "" + 0);				dbHelperofPlayState.changeData("is_none_shuffle", "" + 1);				break;			case R.id.tableRow2:				repeat_one();				isShuffle = false;				isNoneShuffle = true;				repeatPlayTV						.setBackgroundResource(R.drawable.textview_touch_bg);				repeatPlayTV.setText(R.string.repeat_play_song);				repeatState = isCurrentRepeat;				intent.putExtra("repeatState", isCurrentRepeat);				sendBroadcast(intent);				dialog.dismiss();				dbHelperofPlayState.changeData("repeat_state", "" + 1);				dbHelperofPlayState.changeData("is_shuffle", "" + 0);				dbHelperofPlayState.changeData("is_none_shuffle", "" + 1);				/** 重置随机播放 */				randomPlayTV.setText(R.string.random_play);				randomPlayTV.setBackgroundDrawable(null);				break;			case R.id.tableRow3:				repeat_all();				isShuffle = false;				isNoneShuffle = true;				repeatPlayTV						.setBackgroundResource(R.drawable.textview_touch_bg);				repeatPlayTV.setText(R.string.repeat_play_all_songs);				repeatState = isAllRepeat;				intent.putExtra("repeatState", isAllRepeat);				sendBroadcast(intent);				dialog.dismiss();				dbHelperofPlayState.changeData("repeat_state", "" + 2);				dbHelperofPlayState.changeData("is_shuffle", "" + 0);				dbHelperofPlayState.changeData("is_none_shuffle", "" + 1);				/** 重置随机播放 */				randomPlayTV.setText(R.string.random_play);				randomPlayTV.setBackgroundDrawable(null);				break;			case R.id.tableRow4:				dialog.dismiss();				break;			}		}	}	/**	 * 单曲循环	 */	public void repeat_one() {		Intent intent = new Intent(CTL_ACTION);		intent.putExtra("control", 1);		sendBroadcast(intent);	}	/**	 * 全部循环	 */	public void repeat_all() {		Intent intent = new Intent(CTL_ACTION);		intent.putExtra("control", 2);		sendBroadcast(intent);	}	/**	 * 顺序播放	 */	public void repeat_none() {		Intent intent = new Intent(CTL_ACTION);		intent.putExtra("control", 3);		sendBroadcast(intent);	}	/**	 * 随机播放	 */	public void shuffleMusic() {		Intent intent = new Intent(CTL_ACTION);		intent.putExtra("control", 4);		sendBroadcast(intent);	}	private class SeekBarChangeListener implements OnSeekBarChangeListener {		@Override		public void onProgressChanged(SeekBar seekBar, int progress,				boolean fromUser) {			switch (seekBar.getId()) {			case R.id.seekBar_playProgress:				if (fromUser) {					if (isWaitForPlay) {						/** 设置暂停并换了歌时用户拖动时间轴改变的进度 **/						actionIntent.putExtra("progress", progress);						actionIntent.putExtra("MSG",								AppConstant.PlayerMsg.PROGRESS_CHANGE);					} else {						progressIntent = new Intent();						progressIntent.putExtra("progress", progress);						progressIntent								.setAction("com.stark.media.MUSIC_SERVICE");						progressIntent.putExtra("url", url);						progressIntent.putExtra("listPosition", listPosition);						progressIntent.putExtra("MSG",								AppConstant.PlayerMsg.PROGRESS_CHANGE);						isProgressChangeByUser = true;						if (isPlaying) {							stopService(progressIntent);							progressIntent.putExtra("mp3Infos",									(Serializable) mp3Infos);							startService(progressIntent);						}					}				}				break;			case R.id.seekBar_volume:				// 设置音量				am.setStreamVolume(AudioManager.STREAM_MUSIC, progress, 0);				System.out.println("am--->" + progress);				break;			}		}		@Override		public void onStartTrackingTouch(SeekBar seekBar) {		}		@Override		public void onStopTrackingTouch(SeekBar seekBar) {		}	}	/**	 * 暂停状态下换歌后点击播放回调接口	 * 	 * @author Administrator	 * 	 */	public interface OnPauseStatClick {		public void onPauseStatClick();	}	/**	 * 暂停 换歌后的回调类	 * 	 * @author Administrator	 * 	 */	public class PauseCaller {		public OnPauseStatClick op;		public void setOnPauseStatClick(OnPauseStatClick op) {			PauseCaller.this.op = op;		}		public void pauseCall() {			PauseCaller.this.op.onPauseStatClick();		}	}	/**	 * 上一首	 */	public void previous_music() {		if (isShuffle) {			listPosition = getRandomIndex(mp3Infos.size() - 1);		} else {			listPosition = listPosition - 1;		}		if (listPosition >= 0) {			Mp3Info mp3Info = mp3Infos.get(listPosition); // 上一首MP3			if (isWaitForPlay) {				showArtwork(listPosition, -1);			}			String title = mp3Info.getTitle();			musicTitle.setText(mp3Info.getTitle());			musicArtist.setText(mp3Info.getArtist());			url = mp3Info.getUrl();			actionIntent = new Intent();			actionIntent.setAction("com.stark.media.MUSIC_SERVICE");			actionIntent.putExtra("url", mp3Info.getUrl());			actionIntent.putExtra("listPosition", listPosition);			actionIntent.putExtra("MSG", AppConstant.PlayerMsg.PRIVIOUS_MSG);			if (isPlaying) {				actionIntent.putExtra("mp3Infos", (Serializable) mp3Infos);				startService(actionIntent);			} else {				/** 重置时间轴 **/				currentProgress.setText("00:00");				music_progressBar.setProgress(0);				isWaitForPlay = true;				pauseCaller = new PauseCaller();				pauseCaller.setOnPauseStatClick(new OnPauseStatClick() {					@Override					public void onPauseStatClick() {						actionIntent.putExtra("mp3Infos",								(Serializable) mp3Infos);						actionIntent.putExtra("previous_pause", true);// 暂停情况下换歌，防止重复播放动画						startService(actionIntent);					}				});			}			titleSongNumberTV.setText((listPosition + 1) + "/"					+ mp3Infos.size());		} else {// 过头了			actionIntent = new Intent();			actionIntent.setAction("com.stark.media.MUSIC_SERVICE");			actionIntent.putExtra("MSG", AppConstant.PlayerMsg.STOP_MSG);			startService(actionIntent);			this.finish();			/*			 * listPosition = listPosition + 1; Mp3Info mp3Info =			 * mp3Infos.get(listPosition); // 上一首MP3 String title =			 * mp3Info.getTitle(); musicTitle.setText(mp3Info.getTitle());			 * musicArtist.setText(mp3Info.getArtist()); url = mp3Info.getUrl();			 * actionIntent = new Intent();			 * actionIntent.setAction("com.stark.media.MUSIC_SERVICE");			 * actionIntent.putExtra("url", mp3Info.getUrl());			 * actionIntent.putExtra("listPosition", listPosition);			 * actionIntent.putExtra("MSG", AppConstant.PlayerMsg.PRIVIOUS_MSG);			 * if (isPlaying) { actionIntent.putExtra("mp3Infos", (Serializable)			 * mp3Infos); startService(actionIntent); } else {			 *//** 重置时间轴 **/			/*			 * currentProgress.setText("00:00");			 * music_progressBar.setProgress(0); isWaitForPlay = true;			 * pauseCaller = new PauseCaller();			 * pauseCaller.setOnPauseStatClick(new OnPauseStatClick() {			 * 			 * @Override public void onPauseStatClick() {			 * actionIntent.putExtra("mp3Infos", (Serializable) mp3Infos);			 * actionIntent.putExtra("previous_pause", true);// 暂停情况下换歌，防止重复播放动画			 * startService(actionIntent);			 * 			 * } }); }			 */		}	}	/**	 * 获取随机位置	 * 	 * @param end	 * @return	 */	protected int getRandomIndex(int end) {		int index;		do {			index = (int) (Math.random() * end);		} while (index == end);		return index;	}	/**	 * 下一首	 */	public void next_music() {		if (isShuffle) {			listPosition = getRandomIndex(mp3Infos.size() - 1);		} else {			listPosition = listPosition + 1;		}		if (listPosition <= mp3Infos.size() - 1) {			Mp3Info mp3Info = mp3Infos.get(listPosition);			if (isWaitForPlay) {				showArtwork(listPosition, 1);			}			url = mp3Info.getUrl();			musicTitle.setText(mp3Info.getTitle());			musicArtist.setText(mp3Info.getArtist());			actionIntent = new Intent();			actionIntent.setAction("com.stark.media.MUSIC_SERVICE");			actionIntent.putExtra("url", mp3Info.getUrl());			actionIntent.putExtra("listPosition", listPosition);			actionIntent.putExtra("MSG", AppConstant.PlayerMsg.NEXT_MSG);			if (isPlaying) {				stopService(actionIntent);				actionIntent.putExtra("mp3Infos", (Serializable) mp3Infos);				startService(actionIntent);			} else {				/** 重置时间轴 **/				currentProgress.setText("00:00");				music_progressBar.setProgress(0);				isWaitForPlay = true;				pauseCaller = new PauseCaller();				pauseCaller.setOnPauseStatClick(new OnPauseStatClick() {					@Override					public void onPauseStatClick() {						actionIntent.putExtra("mp3Infos",								(Serializable) mp3Infos);						actionIntent.putExtra("next_pause", true);// 暂停情况下换歌，防止重复播放动画						startService(actionIntent);					}				});			}			titleSongNumberTV.setText((listPosition + 1) + "/"					+ mp3Infos.size());		} else {// 到底了			listPosition = 0;			Mp3Info mp3Info = mp3Infos.get(listPosition);			url = mp3Info.getUrl();			musicTitle.setText(mp3Info.getTitle());			musicArtist.setText(mp3Info.getArtist());			actionIntent = new Intent();			actionIntent.setAction("com.stark.media.MUSIC_SERVICE");			actionIntent.putExtra("url", mp3Info.getUrl());			actionIntent.putExtra("listPosition", listPosition);			actionIntent.putExtra("MSG", AppConstant.PlayerMsg.NEXT_MSG);			if (isPlaying) {				stopService(actionIntent);				actionIntent.putExtra("mp3Infos", (Serializable) mp3Infos);				startService(actionIntent);			} else {				/** 重置时间轴 **/				currentProgress.setText("00:00");				music_progressBar.setProgress(0);				isWaitForPlay = true;				pauseCaller = new PauseCaller();				pauseCaller.setOnPauseStatClick(new OnPauseStatClick() {					@Override					public void onPauseStatClick() {						actionIntent.putExtra("mp3Infos",								(Serializable) mp3Infos);						actionIntent.putExtra("next_pause", true);// 暂停情况下换歌，防止重复播放动画						startService(actionIntent);					}				});			}			titleSongNumberTV.setText((listPosition + 1) + "/"					+ mp3Infos.size());		}	}	/**	 * 	 * @author 电话监听器类	 */	private class MobliePhoneStateListener extends PhoneStateListener {		@Override		public void onCallStateChanged(int state, String incomingNumber) {			switch (state) {			case TelephonyManager.CALL_STATE_IDLE: // 挂机状态 其实没事情况下就触发 坑死我了Device													// call state: No activity.				Intent intent = new Intent(PlayMusicActivity.this,						PlayerService.class);				intent.setAction("com.stark.media.MUSIC_SERVICE");				intent.putExtra("MSG", AppConstant.PlayerMsg.CONTINUE_MSG); // 继续播放音乐				intent.putExtra("mp3Infos", (Serializable) mp3Infos);				// Log.e("", "挂机状态");				startService(intent);				isPlaying = true;				isPause = false;				break;			case TelephonyManager.CALL_STATE_OFFHOOK: // 通话状态			case TelephonyManager.CALL_STATE_RINGING: // 响铃状态				Intent intent2 = new Intent(PlayMusicActivity.this,						PlayerService.class);				intent2.setAction("com.stark.media.MUSIC_SERVICE");				intent2.putExtra("MSG", AppConstant.PlayerMsg.PAUSE_MSG);				intent2.putExtra("mp3Infos", (Serializable) mp3Infos);				startService(intent2);				isPlaying = true;				isPause = false;				break;			default:				break;			}		}	}	@Override	protected void onStart() {		super.onStart();	}	/**	 * 从Bundle中获取来自Fragment中传过来的数据	 */	@SuppressWarnings("unchecked")	private void getDataFromBundle() {		Intent intent = getIntent();		Bundle bundle = intent.getExtras();		title = bundle.getString("title");		artist = bundle.getString("artist");		url = bundle.getString("url");		listPosition = bundle.getInt("listPosition");		repeatState = bundle.getInt("repeatState");		isShuffle = bundle.getBoolean("shuffleState");		flag = bundle.getInt("MSG");		currentTime = bundle.getInt("currentTime");		duration = bundle.getInt("duration");		mp3Infos = (ArrayList) bundle.getSerializable("mp3Infos");	}	@Override	protected void onPause() {		super.onPause();		mSensorManager.unregisterListener(this);		//overridePendingTransition(R.anim.empty, R.anim.fragment_silde_out_right);	}	@Override	protected void onResume() {		super.onResume();		//overridePendingTransition(R.anim.fragment_slide_in_left, R.anim.empty);		registerReceiver();		hasResumed = true;		/**		 * 强制设置为竖屏		 */		setRequestedOrientation(ActivityInfo.SCREEN_ORIENTATION_PORTRAIT);		mSensorManager.registerListener(this, mOrientationSensor,				SensorManager.SENSOR_DELAY_NORMAL);	}	/**	 * 反注册广播	 */	@Override	protected void onStop() {		super.onStop();		getApplicationContext().unregisterReceiver(playerReceiver);		System.out.println("PlayerActivity has stoped");	}	/**	 * 退出程序	 */	private void exit() {				  Intent intent = new Intent(this, PlayerService.class);		  this.stopService(intent);		 		this.finish();	}	@Override	protected void onDestroy() {	//	 exit();		//android.os.Process.killProcess(android.os.Process.myPid());		Log.e("", "playactivityondestory");		super.onDestroy();	}	/**	 * 播放音乐	 */	public void play() {		// 开始播放的时候为顺序播放		switch (repeatState) {		case 1:			repeat_one();			break;		case 2:			repeat_all();			break;		case 3:			repeat_none();		default:			break;		}		Intent intent = new Intent();		intent.setAction("com.stark.media.MUSIC_SERVICE");		intent.putExtra("url", url);		intent.putExtra("listPosition", listPosition);		intent.putExtra("MSG", flag);		intent.putExtra("mp3Infos", (Serializable) mp3Infos);		startService(intent);	}	/**	 * 用来接收从service传回来的广播的内部类	 */	public class PlayerReceiver extends BroadcastReceiver {		@Override		public void onReceive(Context context, Intent intent) {			String action = intent.getAction();		//	Log.e(""+action, "Plater Receiver");			if (action.equals(MUSIC_CURRENT)) {				currentTime = intent.getIntExtra("currentTime", -1);				if (!isWaitForPlay && !isPause) {					currentProgress.setText(MediaUtil.formatTime(currentTime));					music_progressBar.setMax(PlayerService.duration);					music_progressBar.setProgress(currentTime);				}			} else if (action.equals(MUSIC_DURATION)) {				int duration = intent.getIntExtra("duration", -1);				music_progressBar.setMax(duration);				finalProgress.setText(MediaUtil.formatTime(duration));			} else if (action.equals(UPDATE_ACTION)) {				// 获取Intent中的current消息，current代表当前正在播放的歌曲				listPosition = intent.getIntExtra("current", -1);				int play_action = intent.getIntExtra("play_action", 0);				url = mp3Infos.get(listPosition).getUrl();				if (!isWaitForPlay) {					showArtwork(listPosition, play_action);				}				if (listPosition >= 0) {					musicTitle.setText(mp3Infos.get(listPosition).getTitle());					musicArtist.setText(mp3Infos.get(listPosition).getArtist());					titleSongNumberTV.setText((listPosition + 1) + "/"							+ mp3Infos.size());				}				/*				 * if (listPosition == 0) {				 * finalProgress.setText(MediaUtil.formatTime(mp3Infos.get(				 * listPosition).getDuration())); isPause = true; }				 */			}		}	}	/**	 * 获取bitmap	 * 	 * @param position	 * @return	 */	private Bitmap getBmpInList(int position) {		Mp3Info mp3Info = mp3Infos.get(position);		return MediaUtil.getArtwork(this, mp3Info.getId(),				mp3Info.getAlbumId(), true, false);	}	private static Bitmap front;	private Bitmap behind;;	public static Bitmap getArtworkOut() {		return front;	}	/**	 * 显示专辑封面	 * 	 * @param position	 *            mp3info在MP3Infos中的位置	 * @param action	 *            -1：前一首 0：没有 1：下一首	 */	private void showArtwork(final int position, int action) {		if (action != 0) {			if (position - 1 >= 0 && position + 1 <= mp3Infos.size()) {				showArtworkAnim(position, action);			} else {				// 后期退回到MainActivity			}			return;		} else {			front = getBmpInList(position);			if (front == null) {// 设置文字封面				front = getTextArtwork(mp3Infos.get(position).getAlbum(),						mp3Infos.get(position).getArtist());			}			artwork_front.setImageBitmap(front);		}	}	private Animation albumanim1;	private Animation albumanim2;	private void showArtworkAnim(int position, int action) {		switch (action) {		case -1:			albumanim1 = AnimationUtils.loadAnimation(PlayMusicActivity.this,					R.anim.album_slide_out_to_right);			// Log.e("start","前一首");			artwork_front.startAnimation(albumanim1);			albumanim1.setAnimationListener(new AnimationListener() {				@Override				public void onAnimationStart(Animation animation) {					// TODO Auto-generated method stub				}				@Override				public void onAnimationRepeat(Animation animation) {					// TODO Auto-generated method stub				}				@Override				public void onAnimationEnd(Animation animation) {					// TODO Auto-generated method stub					artwork_front.setImageBitmap(behind);				}			});			behind = getBmpInList(position);			if (behind == null) {				behind = getTextArtwork(mp3Infos.get(position).getAlbum(),						mp3Infos.get(position).getArtist());			}			artwork_behind.setImageBitmap(behind);			albumanim2 = AnimationUtils.loadAnimation(PlayMusicActivity.this,					R.anim.album_slide_in_from_left);			// Log.e("end","前一首");			artwork_behind.startAnimation(albumanim2);			break;		case 1:			// Log.e("", "下一首");			albumanim1 = AnimationUtils.loadAnimation(PlayMusicActivity.this,					R.anim.album_slide_out_to_left);			artwork_front.startAnimation(albumanim1);			albumanim1.setAnimationListener(new AnimationListener() {				@Override				public void onAnimationStart(Animation animation) {					// TODO Auto-generated method stub				}				@Override				public void onAnimationRepeat(Animation animation) {					// TODO Auto-generated method stub				}				@Override				public void onAnimationEnd(Animation animation) {					// TODO Auto-generated method stub					artwork_front.setImageBitmap(behind);				}			});			behind = getBmpInList(position);			if (behind == null) {				behind = getTextArtwork(mp3Infos.get(position).getAlbum(),						mp3Infos.get(position).getArtist());			}			artwork_behind.setImageBitmap(behind);			albumanim2 = AnimationUtils.loadAnimation(PlayMusicActivity.this,					R.anim.album_slide_in_from_right);			artwork_behind.startAnimation(albumanim2);			break;		default:			break;		}	}	/**	 * 创建文字的专辑封面	 * 	 * @param albumName	 * @param artistName	 * @return	 */	public Bitmap getTextArtwork(String albumName, String artistName) {		TextView albumNameArtwork = (TextView) findViewById(R.id.textView_artwork_album_name);		TextView artistNameArtwork = (TextView) findViewById(R.id.textView_artwork_artist);		albumNameArtwork.setVisibility(View.VISIBLE);		artistNameArtwork.setVisibility(View.VISIBLE);		albumNameArtwork.setText(albumName);		artistNameArtwork.setText(artistName);		Bitmap bitmap = Bitmap.createBitmap(artworkLayoutWidth,				artworklayoutHeight, Bitmap.Config.ARGB_8888);		Canvas canvas = new Canvas(bitmap);		canvas.rotate(-35, artworkLayoutWidth / 2, artworklayoutHeight / 2);		artworkRL.draw(canvas);		albumNameArtwork.setVisibility(View.GONE);		artistNameArtwork.setVisibility(View.GONE);		return bitmap;	}	/**	 * onCreate()后渲染专辑封面	 */	@Override	public void onWindowFocusChanged(boolean hasFocus) {		super.onWindowFocusChanged(hasFocus);		if (hasFocus == true) {			artworkRL = (RelativeLayout) findViewById(R.id.RelativeLayout_text_artwork);			artworkLayoutWidth = artworkRL.getWidth();			artworklayoutHeight = artworkRL.getHeight();			showArtwork(listPosition, 0);		}	}	/**	 * 回调音量控制函数	 */	@Override	public boolean dispatchKeyEvent(KeyEvent event) {		int action = event.getAction();		int keyCode = event.getKeyCode();		switch (keyCode) {		case KeyEvent.KEYCODE_VOLUME_UP: // 按音量减键			Log.e("", "volumeup");			if (currentVolume < maxVolume) {				currentVolume = currentVolume + 1;				sb_player_voice.setProgress(currentVolume);				am.setStreamVolume(AudioManager.STREAM_MUSIC, currentVolume, 0);			} else {				am.setStreamVolume(AudioManager.STREAM_MUSIC, currentVolume, 0);			}			return false;		case KeyEvent.KEYCODE_VOLUME_DOWN: // 按音量加键			if (currentVolume > 0) {				currentVolume = currentVolume - 1;				sb_player_voice.setProgress(currentVolume);				am.setStreamVolume(AudioManager.STREAM_MUSIC, currentVolume, 0);			} else {				am.setStreamVolume(AudioManager.STREAM_MUSIC, currentVolume, 0);			}			return false;		default:			return super.dispatchKeyEvent(event);		}	}	public static List<Mp3Info> getMp3InfosForOut() {		return mp3Infos;	}	@Override	public void onSensorChanged(SensorEvent event) {		// 自动旋转。0为关闭 1为开启		// 得到是否开启		int flag = Settings.System.getInt(getContentResolver(),				Settings.System.ACCELEROMETER_ROTATION, 0);		if (flag == 0) {			return;		}		float roll = event.values[2];		float y = event.values[1];		/*		 * Log.e("", event.values[0] + " " + event.values[1] + " " +		 * event.values[2]);		 */		if (y > -30 && Math.abs(roll) > 30) {			Intent intent = new Intent(PlayMusicActivity.this,					GridViewActivity.class);			if (hasResumed && MainActivity.getScreenHeight() != 0					&& MainActivity.getScreenWidth() != 0)				startActivity(intent);		}	}	@Override	public void onAccuracyChanged(Sensor sensor, int accuracy) {	}	public class FinishBroadcastReceiver extends BroadcastReceiver {		@Override		public void onReceive(Context context, Intent intent) {			String action = intent.getAction();			if (action.equals("FINISH")) {				PlayMusicActivity.this.finish();				PlayMusicActivity.this.onDestroy();			}		}	}    public class ServicePlayControlReceiver extends  BroadcastReceiver{        @Override        public void onReceive(Context context, Intent intent) {            String playAction = intent.getStringExtra("PLAY_ACTION");            Log.e("PLayserviceaction",playAction);            if(playAction.equals("next")){                next_music();            }else if(playAction.equals("pre")){                previous_music();            } else if (playAction.equals("pause")) {                playBtn.setImageResource(R.drawable.play_play);                isPlaying = false;                isPause = true;                isWaitForPlay = true;            } else if (playAction.equals("resume")) {                playBtn.setImageResource(R.drawable.play_pause_selector);                isPause = false;                isPlaying = true;                isWaitForPlay = false;                isProgressChangeByUser = false;            }        }    }}